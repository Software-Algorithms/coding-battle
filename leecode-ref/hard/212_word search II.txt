public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<String>();
        Set<String> curr = new HashSet<String>();
        StringBuilder currStr = new StringBuilder();
        Trie trie = new Trie();
        for(int i=0;i<words.length;i++) trie.insert(words[i]);
        for(int i=0;i<board.length;i++)
            for(int j=0;j<board[0].length;j++)
                findWords(board,i,j,currStr,curr,res,trie);
        return res;
    }
    
    public void findWords(char[][] board, int a, int b, StringBuilder currStr, Set<String> curr, List<String> res, Trie trie){
        if(curr.contains(String.valueOf(a)+" "+String.valueOf(b))) return;
        currStr.append(board[a][b]);
        int startsWithPrefix = trie.startsWith(currStr.toString());
        if(startsWithPrefix<0) {
            currStr.deleteCharAt(currStr.length()-1);
            return;
        }
        else{
            if(startsWithPrefix==1) res.add(currStr.toString());
            curr.add(String.valueOf(a)+" "+String.valueOf(b));
            if(a+1<board.length) findWords(board,a+1,b,currStr,curr,res,trie);
            if(a-1>=0) findWords(board,a-1,b,currStr,curr,res,trie);
            if(b+1<board[0].length) findWords(board,a,b+1,currStr,curr,res,trie);
            if(b-1>=0) findWords(board,a,b-1,currStr,curr,res,trie);
            curr.remove(String.valueOf(a)+" "+String.valueOf(b));
            currStr.deleteCharAt(currStr.length()-1);
        }
    }
}



class TrieNode {
    char keyChar;
    int storeWord;
    List<TrieNode> children;
    // Initialize your data structure here.
    public TrieNode() {
        children = new ArrayList<TrieNode>();
    }
    public TrieNode(char x) {
        keyChar = x;
        children = new ArrayList<TrieNode>();
    }
}

class Trie {
    private TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode helper = root;
        for(int i=0;i<word.length();i++){
            int indicator = 0;
            for(int j=0;j<helper.children.size();j++){
                if(word.charAt(i)==helper.children.get(j).keyChar){
                    helper = helper.children.get(j);
                    indicator = 1;
                    break;
                }
            }
            if(indicator==0){
                helper.children.add(new TrieNode(word.charAt(i)));
                helper = helper.children.get(helper.children.size()-1);
            }
        }
        helper.storeWord = 1;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    // return -1 when no prefix, 0 when has prefix, 1 when also has word.
    public int startsWith(String prefix) {
        TrieNode helper = root;
        for(int i=0;i<prefix.length();i++){
            int indicator = 0;
            for(int j=0;j<helper.children.size();j++){
                if(prefix.charAt(i)==helper.children.get(j).keyChar){
                    helper = helper.children.get(j);
                    indicator = 1;
                    break;
                }
            }
            if(indicator==0) return -1;
        }
        if(helper.storeWord==1){
            helper.storeWord = 0; //customize for this problem to avoid adding duplicate words 
            return 1;
        }
        else return 0;
    }
}