public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length==0) return new int[0];
        LinkedList<Integer> descList = new LinkedList<Integer>();
        int[] res = new int[nums.length+1-k];
        for(int i=0;i<k-1;i++) addDescList(descList,nums[i]);
        for(int i=0;i<res.length;i++){
            addDescList(descList,nums[i+k-1]);
            res[i] = descList.getFirst();
            if(nums[i]==descList.getFirst()) descList.removeFirst(); //to delete the left most.
        }
        return res;   
    }
    public void addDescList(LinkedList<Integer> descList, int num){  //can't use List<Integer> descList, List don't have getLast().
        while(!descList.isEmpty()&&num>descList.getLast()) descList.removeLast();
        descList.add(num);
    }  
}

//remove(0) takes O(n) for ArrayList, so should use doubly-linked list.

//for function addDescList(). since we need to add element before delete it, so we could only add and
//delete for nums.length times at most. So it's linear time.
/*
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length==0) return new int[0];
        List<Integer> descList = new ArrayList<Integer>();
        int[] res = new int[nums.length+1-k];
        for(int i=0;i<k-1;i++) addDescList(descList,nums[i]);
        for(int i=0;i<res.length;i++){
            addDescList(descList,nums[i+k-1]);
            res[i] = descList.get(0);
            if(nums[i]==descList.get(0)) descList.remove(0);
        }
        return res;
        
    }
    public void addDescList(List<Integer> descList, int num){
        while(!descList.isEmpty()&&num>descList.get(descList.size()-1)) descList.remove(descList.size()-1);
        descList.add(num);
    }
    
}
*/


