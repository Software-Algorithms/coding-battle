public class Solution {
    public void solveSudoku(char[][] board) {
        Map<Integer,Set<Character>> nineSqr = new HashMap<Integer,Set<Character>>(); 
        Map<Integer,Set<Character>> row = new HashMap<Integer,Set<Character>>();
        Map<Integer,Set<Character>> col = new HashMap<Integer,Set<Character>>();
        for(int i = 0; i < 9; i++) { //avoid null pointer exception.
            nineSqr.put(i,new HashSet<Character>());
            row.put(i,new HashSet<Character>());
            col.put(i,new HashSet<Character>());
        }
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                if(board[i][j]=='.') continue;
                nineSqr.get(pos(i,j)).add(board[i][j]);
                row.get(i).add(board[i][j]);
                col.get(j).add(board[i][j]);
            }
        }
        helper(board, new boolean[1], 0, 0, nineSqr, row, col);
    }
    
    public void helper(char[][] board, boolean[] finish, int a, int b,  Map<Integer,Set<Character>> nineSqr,  Map<Integer,Set<Character>> row,  Map<Integer,Set<Character>> col) {
    	if(finish[0]) return;
        else if(board[a][b]!='.') {
            if(b+1 < board[0].length) helper(board, finish, a , b+1, nineSqr, row, col);
            else if(a+1 < board.length) helper(board, finish, a+1, 0, nineSqr, row, col);
            else finish[0] = true;
        }
        else {
        	for(char c = '1'; c <= '9'; c++) {
                if(nineSqr.get(pos(a,b)).contains(c) || row.get(a).contains(c) || col.get(b).contains(c)) continue;
                board[a][b] = c;
                nineSqr.get(pos(a,b)).add(c);
                row.get(a).add(c);
                col.get(b).add(c);
                if(b+1 < board[0].length) helper(board, finish, a , b+1, nineSqr, row, col);
                else if(a+1 < board.length) helper(board, finish, a+1, 0, nineSqr, row, col);
                else finish[0] = true;
                if(!finish[0]) { //without this, when you finish, you might reset cell to '.'
                	board[a][b] = '.';
                	nineSqr.get(pos(a,b)).remove(c);
                    row.get(a).remove(c);
                    col.get(b).remove(c); 
                }                  
            }
        }
    }
    
    public int pos(int a, int b) {
        return 3*(a/3) + b/3;
    }
}