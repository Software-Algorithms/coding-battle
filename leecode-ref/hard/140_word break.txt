/*
public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> res = new ArrayList<String>();
        if(breakable(s,wordDict)) helper(s,0,new StringBuilder(),res,wordDict);
        return res;
    }
    
    public void helper(String s, int begin, StringBuilder curr, List<String> res, Set<String> wordDict){
        if(begin>=s.length()) return;
        for(String word : wordDict){ //I assume this way is faster when wordDict size is small.
            if(begin + word.length() > s.length()) continue;
            else if(word.equals(s.substring(begin,begin + word.length()))){
                int preLength = curr.length();
                curr.append(word);
                if(begin + word.length()==s.length()) res.add(curr.toString()); //break successfully
                else{
                    curr.append(" ");
                    helper(s, begin + word.length(), curr, res, wordDict);
                }
                curr.delete(preLength,curr.length());
            }
            
        }
    }
    
    public boolean breakable(String s, Set<String> wordDict) {
        if(wordDict.contains(s)) return true;
        else{
            List<Integer> reachable = new ArrayList<Integer>();
            reachable.add(0);
            for(int i=0;i<s.length();i++){
                for(int j:reachable){
                    if(wordDict.contains(s.substring(j,i+1))){
                        reachable.add(i+1);
                        break;
                    } 
                }
            }
            if(reachable.get(reachable.size()-1)==s.length()) return true;
            else return false;
        }
    }
}
*/


public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> res = new ArrayList<String>();
        for(int j = s.length() - 1; j >= 0; j--){ //this check method is quite faster than breakable(s,wordDict) function
                                                      //if put it inside the helper function, it's slower but more meaningful.
            if(wordDict.contains(s.substring(j)))
                break;
            else{
                if(j == 0)
                return res;
            }
        }
        helper(s,0,new StringBuilder(),res,wordDict);
        //if(breakable(s,wordDict)) helper(s,0,new StringBuilder(),res,wordDict); //without check breakable, TLE.
        return res;
    }
    
    public void helper(String s, int begin, StringBuilder curr, List<String> res, Set<String> wordDict){
        if(begin>=s.length()) return;
        for(int i = begin + 1; i <= s.length(); i++){ //this way is faster when wordDict has large size.
            if(wordDict.contains(s.substring(begin,i))){
                int preLength = curr.length();
                curr.append(s.substring(begin,i));
                if(i==s.length()) res.add(curr.toString()); //break successfully
                else{
                    curr.append(" ");
                    helper(s, i, curr, res, wordDict);
                }
                curr.delete(preLength,curr.length());
            }
        }
    }
    
    public boolean breakable(String s, Set<String> wordDict) {
        if(wordDict.contains(s)) return true;
        else{
            List<Integer> reachable = new ArrayList<Integer>();
            reachable.add(0);
            for(int i=0;i<s.length();i++){
                for(int j:reachable){
                    if(wordDict.contains(s.substring(j,i+1))){
                        reachable.add(i+1);
                        break;
                    } 
                }
            }
            if(reachable.get(reachable.size()-1)==s.length()) return true;
            else return false;
        }
    }
}
