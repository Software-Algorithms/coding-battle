//append new node just behind the original node, and it's very easy to find the random new node -> it's just behind the random original node. Then seperate the new
list from the original list.
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null) return null;
        RandomListNode curr = head, nextNode = null;
        while(curr!=null){ //append clone node behind each original node
            nextNode = curr.next;
            curr.next = new RandomListNode(curr.label);
            curr.next.next = nextNode;
            curr = nextNode;
        }
        curr = head;
        while(curr!=null){ //assign random reference
            if(curr.random!=null) curr.next.random = curr.random.next;
            curr = curr.next.next;
        }
        curr = head;
        RandomListNode newHead = head.next; 
        while(curr!=null){ //seperate the two list.
            nextNode = curr.next.next;
            curr.next.next = (nextNode==null)?null:nextNode.next;
            curr.next = nextNode; // with this line we didn't change the original list.
            curr = nextNode;
        }
        return newHead;
    }
}

//store the position of nodes to find random reference.
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head==null) return null;
        Map<RandomListNode, Integer> posMap = new HashMap<RandomListNode, Integer>();
        List<RandomListNode> list = new ArrayList<RandomListNode>();
        RandomListNode curr = head;
        int pos = 0;
        while(curr!=null){
            RandomListNode newNode = new RandomListNode(curr.label);
            if(!list.isEmpty()) list.get(list.size()-1).next = newNode;
            list.add(newNode);
            posMap.put(curr,pos);
            pos++;
            curr = curr.next;
        }
        for(RandomListNode node : posMap.keySet()){
            if(node.random!=null){
                list.get(posMap.get(node)).random = list.get(posMap.get(node.random));
            }
        }
        return list.get(0);
    }
}

//store the new node in map directly
public RandomListNode copyRandomList(RandomListNode head) {
  if (head == null) return null;

  Map<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();

  // loop 1. copy all the nodes
  RandomListNode node = head;
  while (node != null) {
    map.put(node, new RandomListNode(node.label));
    node = node.next;
  }

  // loop 2. assign next and random pointers
  node = head;
  while (node != null) {
    map.get(node).next = map.get(node.next);
    map.get(node).random = map.get(node.random);
    node = node.next;
  }

  return map.get(head);
}