//O(n)
public class Solution {
    public int jump(int[] nums) {
        if(nums.length<=1) return 0;
        int[] jumps = new int[nums.length];
        int currPos = 1;
        for(int i=0;i<nums.length;i++) {
            for(int j = currPos;j<=nums[i]+i && j<nums.length; j++) jumps[j] = jumps[i] + 1;
            if(currPos < nums[i]+i+1) currPos = nums[i]+i+1;
        }
        return jumps[jumps.length-1];
    }
}

/*
O(n^2)
public class Solution {
    public int jump(int[] nums) {
        if(nums.length<=1) return 0;
        int[] jumps = new int[nums.length];
        jumps[0] = 0;
        for(int i=1;i<jumps.length;i++){
            int min = Integer.MAX_VALUE;
            for(int j = i-1; j>=0 ;j--){
                if(jumps[j]>=0&&(nums[j]+j)>=i){
                    int dis = jumps[j] + 1;
                    if(dis<min) min = dis;
                }
            }
            jumps[i] = min;
        }
        return jumps[jumps.length-1];
    }
}
*/