public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res = new ArrayList<String>();
        if(num.length()==0) return res;
        helper(num, target, 0, 0, 0, 1, "", res);
        return res;
    }
     
    public void helper(String num, int target, int start, long currRes, long preProduct, int sign, String str, List<String> res) {
        if(start == num.length()) {
            if(currRes + sign*preProduct == (long)target) {
                res.add(str);
            }
        }
        else {
            for(int i = 1; i <= num.length()-start; i++) {
                String numStr = num.substring(start, start + i);
                long curr = Long.parseLong(numStr);
                if(curr > (long)Integer.MAX_VALUE) break;
                if(start!=0) {
                    helper(num, target, start+i, currRes+sign*preProduct, curr, 1, str+"+"+numStr, res);
                    helper(num, target, start+i, currRes+sign*preProduct, curr, -1, str+"-"+numStr, res);
                    helper(num, target, start+i, currRes, preProduct*curr, sign, str+"*"+numStr, res);
                }
                else {
                    helper(num, target, start+i, currRes+sign*preProduct, curr, 1, numStr, res);
                }
                if(num.charAt(start)=='0') break; // 0 should not be the left most digit unless it's just 0.
            } 
        }
    }
}