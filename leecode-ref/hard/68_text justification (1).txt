public class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> res = new ArrayList<String>();
        StringBuilder strbd = new StringBuilder();
        List<StringBuilder> curr = new ArrayList<StringBuilder>();
        int currNum = 0;
        if(words.length==0) while(currNum++ < maxWidth) strbd.append(" "); //empty set case.
        for(String word : words) {
            if(word.length() < maxWidth-currNum) {
                curr.add(new StringBuilder(word));
                curr.add(new StringBuilder(" "));
                currNum += word.length() + 1;
            }
            else if(word.length() == maxWidth-currNum) {//when last word has length==maxWidth and currNum!=0, need to use code below to hold
                curr.add(new StringBuilder(word));
                for(StringBuilder str : curr) strbd.append(str);
                res.add(strbd.toString());
                curr.clear();
                currNum = 0;
                strbd.delete(0,strbd.length());
            }
            else {
                curr.remove(curr.size()-1);
                currNum--;
                if(curr.size()==1) { //when one line only have one word.
                    while(currNum++ < maxWidth) curr.get(0).append(" ");
                }
                else {
                    while(currNum < maxWidth) {
                        for(int i = 1; i < curr.size(); i += 2) {
                            curr.get(i).append(" ");
                            currNum++;
                            if(currNum==maxWidth) break;
                        }
                    }
                }
                for(StringBuilder str : curr) strbd.append(str);
                res.add(strbd.toString());
                curr.clear();
                strbd.delete(0,strbd.length());
                curr.add(new StringBuilder(word));
                curr.add(new StringBuilder(" "));
                currNum = word.length() + 1;
            }
        }
        if(!curr.isEmpty()){
            curr.remove(curr.size()-1); //need these 2 lines, it can't be covered by case 2 above
            currNum--;
            for(StringBuilder str : curr) strbd.append(str);
            while(currNum++ < maxWidth) strbd.append(" ");
            res.add(strbd.toString());
        }
        return res;
    }
}

public class Solution {
    public List<String> fullJustify(String[] words, int L) {
        List<String> list = new LinkedList<String>();

        for (int i = 0, w; i < words.length; i = w) {
            int len = -1;
            for (w = i; w < words.length && len + words[w].length() + 1 <= L; w++) {
                len += words[w].length() + 1;
            }

            StringBuilder strBuilder = new StringBuilder(words[i]);
            int space = 1, extra = 0;
            if (w != i + 1 && w != words.length) { // not 1 char, not last line
                space = (L - len) / (w - i - 1) + 1;
                extra = (L - len) % (w - i - 1);
            }
            for (int j = i + 1; j < w; j++) {
                for (int s = space; s > 0; s--) strBuilder.append(' ');
                if (extra-- > 0) strBuilder.append(' ');
                strBuilder.append(words[j]);
            }
            int strLen = L - strBuilder.length();
            while (strLen-- > 0) strBuilder.append(' ');
            list.add(strBuilder.toString());
        }

        return list;
    }
}