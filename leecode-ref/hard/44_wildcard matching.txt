public class Solution {
    public boolean isMatch(String s, String p) {
        int sIdx = 0, pIdx = 0, sMatchPos = 0, pStarPos = -1;
        while(sIdx < s.length()) {
            if(pIdx < p.length() && (p.charAt(pIdx)=='?' || p.charAt(pIdx)==s.charAt(sIdx))) {
                sIdx++;
                pIdx++;
            }
            else if(pIdx < p.length() && p.charAt(pIdx)=='*') {
                sMatchPos = sIdx;
                pStarPos = pIdx;
                pIdx++;
            }
            else if(pStarPos != -1) {
                sIdx = sMatchPos + 1;
                pIdx = pStarPos + 1; //pIdx = pStarPos or pIdx = pStarPos + 1 both make sense.
                sMatchPos++;
            }
            else return false;
        }
        while(pIdx < p.length() && p.charAt(pIdx)=='*') pIdx++;
        return pIdx == p.length();
    }
}

public class Solution {
    public boolean isMatch(String s, String p) {
    	int sLen = s.length(), pLen = p.length(), j=0;
    	boolean[][] match = new boolean[sLen+1][pLen+1]; //match[i][j] indicate s(0,i-1) matches p(0,j-1).
    	for(j=1, match[0][0]= true ;j<=pLen;j++){ //match p with empty string
    		match[0][j] = p.charAt(j-1)=='*' && match[0][j-1];
    	}
    	for(int i=1;i<=sLen;i++){ 
    		for(j=1;j<=pLen;j++){ //match[i][0] are all false except match[0][0].
    		    if(match[i][j]) continue; //if already computed continue.
    		    match[i][j] = (p.charAt(j-1)=='?'||p.charAt(j-1)=='*'||p.charAt(j-1)==s.charAt(i-1))&&match[i-1][j-1];
    			if(match[i][j]){
                    //propagate all new matches we could get by this match[i][j].
                    //note the two cases below can't combine.
    				if(p.charAt(j-1)=='*') for(int k=i+1;k<=sLen;k++) match[k][j] = true; 
    			    while(j!=pLen&&p.charAt(j)=='*'){
    				    for(int k=i;k<=sLen;k++) match[k][j+1] = true;
    				    j++;
    			    }
    			}
    		}
    	}
        return match[sLen][pLen];  
    }
}

public class Solution {
    public boolean isMatch(String s, String p) {
        int sLen = s.length(), pLen = p.length(), j=0;
        boolean[][] match = new boolean[sLen+1][pLen+1]; //match[i][j] indicate s(0,i-1) matches p(0,j-1).
        for(j=1, match[0][0]= true ;j<=pLen;j++){ //match p with empty string
            match[0][j] = p.charAt(j-1)=='*' && match[0][j-1]; //move one case here
            if(match[0][j]) for(int k=1;k<=sLen;k++) match[k][j] = true; 
        }
        
        for(int i=1;i<=sLen;i++){ 
            for(j=1;j<=pLen;j++){ //match[i][0] are all false except match[0][0].
                if(match[i][j]) continue; //if already computed continue.
                match[i][j] = (p.charAt(j-1)=='?'||p.charAt(j-1)=='*'||p.charAt(j-1)==s.charAt(i-1))&&match[i-1][j-1];
                if(match[i][j]){
                    //propagate all new matches we could get by this match[i][j].
                    //move one case inside matching empty string code block
                    while(j!=pLen&&p.charAt(j)=='*'){
                        for(int k=i;k<=sLen;k++) match[k][j+1] = true;
                        j++;
                    }
                }
            }
        }
        return match[sLen][pLen];  
    }
}