public class Solution {
    public List<List<String>> findLadders(String start, String end, Set<String> dict) {
        return ladderLength(start,end,dict);
    }
    
    public List<List<String>> ladderLength(String beginWord, String endWord, Set<String> wordDict) {
        List<List<String>> res = new ArrayList<List<String>>();
        Set<String> reached = new HashSet<String>();
        Map<String,List<String>> trackingMap = new HashMap<String,List<String>>();
        reached.add(beginWord);
        wordDict.add(endWord);
        Set<String> toDelFromDict = new HashSet<String>();
        while(!reached.contains(endWord)) {
            Set<String> toAdd = new HashSet<String>();
            toDelFromDict.clear();
            for(String each : reached) {
                for (int i = 0; i < each.length(); i++) {
                    char[] chars = each.toCharArray();
                    for (char ch = 'a'; ch <= 'z'; ch++) {
                        chars[i] = ch;
                        String word = new String(chars);
                        if(wordDict.contains(word)) {
                            toAdd.add(word);
                            if(!trackingMap.containsKey(word)){
                                List<String> pres = new ArrayList<String>();
                                pres.add(each);
                                trackingMap.put(word,pres);
                            }
                            else{
                                trackingMap.get(word).add(each);
                            }
                            toDelFromDict.add(word);
                        }
                    }
                }
            }
            if(toAdd.size() == 0) return res;
            for(String toDel:toDelFromDict) wordDict.remove(toDel);
            reached = toAdd;
        }
        generateStrList(res,endWord,new ArrayList<String>(),trackingMap,beginWord);
        return res;
    }
    
    public void generateStrList(List<List<String>> res, String curr, List<String> list, Map<String,List<String>> trackingMap, String begin){
        if(curr.equals(begin)){
            List<String> tmp = new ArrayList<String>(list);
            tmp.add(0,new String(curr));
            res.add(tmp);
        }
        else{
            list.add(0,new String(curr));//These 2 lines can't be inside for loop since curr changed by inner recursion
            for(String pre:trackingMap.get(curr)){
                curr = pre;
                generateStrList(res,curr,list,trackingMap,begin);
            }
            list.remove(0);//These 2 lines can't be inside for loop since curr changed by inner recursion
            
            //below is correct if put that 2 lines inside for loop
            /*for(String pre:trackingMap.get(curr)){
                list.add(0,new String(curr));
                String tmp = curr;
                curr = pre;
                generateStrList(res,curr,list,trackingMap,begin);
                list.remove(0);
                curr = tmp;
            }*/
        }
    }
}

