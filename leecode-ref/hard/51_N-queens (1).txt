public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        helper(res,new HashMap<Integer,Integer>(),0,new ArrayList<String>(),n);
        return res;
    }
    
    public void helper(List<List<String>> res, Map<Integer,Integer> map, int line, List<String> curr, int n) {
        if(line==n) {
            List<String> toAdd = new ArrayList<String>(curr);
            res.add(toAdd);
            return;
        }
        for(int i = 0; i < n; i++) {
            boolean valid = true;
            for(int x : map.keySet()) {
                int y = map.get(x);
                if(y==i || (line-x==i-y) || (line-x==y-i)) {
                    valid = false;
                    break;
                }
            }
            if(!valid) continue;
            StringBuilder strbd = new StringBuilder();
            for(int k = 0; k < n; k++) {
                if(k==i) strbd.append('Q');
                else strbd.append('.');
            }
            curr.add(strbd.toString());
            map.put(line,i);
            helper(res,map,line+1,curr,n);
            curr.remove(curr.size()-1);
            map.remove(line);
        }
    }
}


public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        boolean[][] notValid = new boolean[n][n];
        helper(res,notValid,0,new ArrayList<String>(),n);
        return res;
    }
    
    public void helper(List<List<String>> res, boolean[][] notValid, int line, List<String> curr, int n) {
        if(n==0) return;
        else if(line==n-1) {
            for(int i = 0; i < n; i++) {
                if(notValid[line][i]) continue;
                StringBuilder strbd = new StringBuilder();
                for(int k = 0; k < n; k++) {
                    if(k==i) strbd.append('q');
                    else strbd.append('.');
                }
                List<String> toAdd = new ArrayList<String>(curr);
                toAdd.add(strbd.toString());
                res.add(toAdd);
            }
            return;
        }
        
        for(int i = 0; i < n; i++) {
            if(notValid[line][i]) continue;
            StringBuilder strbd = new StringBuilder();
            for(int k = 0; k < n; k++) {
                if(k==i) strbd.append('q');
                else strbd.append('.');
            }
            curr.add(strbd.toString());
            for(int j = line + 1, left = i -1, right = i + 1; j < n; j++) {
                notValid[j][i] = true;
                if(left>=0) notValid[j][left--] = true;
                if(right<n) notValid[j][right++] = true;
            }
            helper(res,notValid,line+1,curr,n);
            curr.remove(curr.size()-1);
            for(int j = line + 1, left = i -1, right = i + 1; j < n; j++) {
                notValid[j][i] = false;
                if(left>=0) notValid[j][left--] = false;
                if(right<n) notValid[j][right++] = false;
            }
        }
    }
}