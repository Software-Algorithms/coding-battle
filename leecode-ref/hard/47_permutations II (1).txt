public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        List<Integer> candidate = new ArrayList<Integer>();
        for(int i : nums) candidate.add(i);
        helper(res, new ArrayList<Integer>(), candidate);
        return res;
    }
    
    public void helper(List res, List<Integer> curr, List<Integer> candidate) {
        if(candidate.size()==1) {
            List<Integer> toAdd = new ArrayList<Integer>(curr);
            toAdd.add(candidate.get(0));
            res.add(toAdd);
        }
        else{
            for(int i = 0; i < candidate.size(); i++) {
                if(i!=0&&candidate.get(i)==candidate.get(i-1)) continue;
                curr.add(candidate.get(i));
                List<Integer> newCandi = new ArrayList<Integer>(candidate);
                newCandi.remove(i);
                helper(res,curr,newCandi);
                curr.remove(curr.size()-1);
            }
        }
    }
}

//iterative. use set to eliminate duplicates.
public class Solution {
    public List<List<Integer>> permuteUnique(int[] num) {
        LinkedList<List<Integer>> res = new LinkedList<>();
        res.add(new ArrayList<>());
        for (int i = 0; i < num.length; i++) {
            Set<String> cache = new HashSet<>();
            while (res.peekFirst().size() == i) {
                List<Integer> l = res.removeFirst();
                for (int j = 0; j <= l.size(); j++) {
                    List<Integer> newL = new ArrayList<>(l.subList(0,j));
                    newL.add(num[i]);
                    newL.addAll(l.subList(j,l.size()));
                    if (cache.add(newL.toString())) res.add(newL);
                }
            }
        }
        return res;
    }
}