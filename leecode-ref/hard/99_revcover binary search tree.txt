public class Solution {
    TreeNode first = null, second = null, pre = null;
    public void recoverTree(TreeNode root) {
         first = null;
         second = null;
         pre = null;
         helper(root);
         if(first!=null&&second!=null){
             int tmp = first.val;
             first.val = second.val;
             second.val = tmp;
         }
         return;
    }
    
    public void helper(TreeNode root){
        if(root==null) return;
        if(root.left!=null) helper(root.left);
        if(pre!=null && pre.val > root.val) {
            if(first==null) first = pre;
            second = root;
        }
        pre = root;
        if(root.right!=null) helper(root.right);    
    }
}

/*
public class Solution {
    public void recoverTree(TreeNode root) {
         List<TreeNode> list = new ArrayList<TreeNode>();
         helper(root,list);
         TreeNode first = null, second = null;
         for(int i = 0; i<list.size(); i++) {
             if(i!=list.size()-1&&list.get(i).val>list.get(i+1).val) {
                 if(first==null) first = list.get(i); //the former node should be the first element > its right neighbor
             }
             else if(i!=0&&list.get(i).val<list.get(i-1).val) {
                 second = list.get(i);  //no if statement, the latter node should be the last element < its left neighbor
             }
         }
         if(first!=null&&second!=null){
             int tmp = first.val;
             first.val = second.val;
             second.val = tmp;
         }
         return;
    }
    
    public void helper(TreeNode root, List<TreeNode> list){
        if(root==null) return;
        if(root.left!=null) helper(root.left,list);
        list.add(root);
        helper(root.right,list);    
    }
}
*/