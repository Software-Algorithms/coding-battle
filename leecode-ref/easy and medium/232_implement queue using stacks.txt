/*class StackNode{
    int val;
    StackNode next;
    public StackNode(int x){
        val = x;
    }
}

class Stack{
    StackNode head;
    public void push(int x){
        if(head==null) head = new StackNode(x);
        else{
            HeadNode temp = new StackNode(x);
            temp.next = head;
            head = temp;
        }
    }
    public boolean isEmpty(){
        if(head==null) return true;
        else return false;
    }
    public void pop(){
        if(head!=null){
            head = head.next;
        }
        return;
    }
    public int peek(){
        if(head!=null) return head.val;
        else return 0;
    }
}*/


//java has its own stack in compilation, no need to write your own.
public class MyQueue {
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();
    // Push element x to the back of queue.
    public void push(int x) {
        s1.push(x);
    }

    // Removes the element from in front of queue.
    public void pop() {
        if(!s2.isEmpty()){
            s2.pop();
        }
        else{
            while(!s1.isEmpty()){
                s2.push(s1.peek());
                s1.pop();
            }
            s2.pop();
        }
    }

    // Get the front element.
    public int peek() {
        int temp = 0;
        if(!s2.isEmpty()){
            temp = s2.peek();
        }
        else{
            while(!s1.isEmpty()){
                s2.push(s1.peek());
                s1.pop();
            }
            temp = s2.peek();
        }
        return temp;
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return (s1.isEmpty()&&s2.isEmpty());
    }
}