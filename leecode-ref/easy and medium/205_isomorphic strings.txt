public class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length() != t.length()) return false;
        HashMap<Character, Character> hash = new HashMap<Character, Character>();
        for(int i = 0; i < s.length(); i++){
            if(hash.containsKey(s.charAt(i))){
                if(t.charAt(i) != hash.get(s.charAt(i))) return false;
            }else{
                if(hash.containsValue(t.charAt(i))) return false;
                else hash.put(s.charAt(i), t.charAt(i));
            }
        }
        return true;
    }
}

//use only one stack, brilliant
public class MinStack {
    private readonly Stack<long> stack = new Stack<long>();
    private long min = 0l;
    public void Push(int x){
        stack.Push((long)x - (min = stack.Count == 0 ? (long)x : min));
        if ((long)x < min) min = (long)x;
    }
    public void Pop(){
        if(stack.Peek() < 0) min -= stack.Peek();
        stack.Pop();
    }
    public int Top(){
        return stack.Peek() < 0 ? (int)min : (int)(min + stack.Peek());
    }
    public int GetMin(){
        return (int)min;
    }
}

/*public class Solution {
    public boolean isIsomorphic(String s, String t) {
        Map<Character,Character> mapST = new HashMap<Character,Character>();
        Map<Character,Character> mapTS = new HashMap<Character,Character>();
        for(int i=0;i<s.length();i++){
            if(mapST.containsKey(s.charAt(i))&&mapST.get(s.charAt(i))!=t.charAt(i)) return false;
            else if(mapTS.containsKey(t.charAt(i))&&mapTS.get(t.charAt(i))!=s.charAt(i)) return false;
            else{
                mapST.put(s.charAt(i),t.charAt(i));
                mapTS.put(t.charAt(i),s.charAt(i));
            }
        }
        return true;
    }
}*/