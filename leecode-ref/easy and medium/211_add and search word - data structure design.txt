public class WordDictionary {
    private TrieNode root;
    public WordDictionary() {
        root = new TrieNode();
    }
    
    // Adds a word into the data structure.
    public void addWord(String word) {
        TrieNode helper = root;
        for(int i=0;i<word.length();i++){
            int indicator = 0;
            for(int j=0;j<helper.children.size();j++){
                if(word.charAt(i)==helper.children.get(j).keyChar){
                    helper = helper.children.get(j);
                    indicator = 1;
                    break;
                }
            }
            if(indicator==0){
                helper.children.add(new TrieNode(word.charAt(i)));
                helper = helper.children.get(helper.children.size()-1);
            }
        }
        helper.storeWord = 1;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return search(word,0,root);
    }
    
    public boolean search(String word, int start, TrieNode root){
        if(start==word.length()-1){
            if(word.charAt(start)=='.') {
                for(int j=0;j<root.children.size();j++)
                    if(root.children.get(j).storeWord==1) return true;
                return false;
            }
            for(int j=0;j<root.children.size();j++){
                if(word.charAt(start)==root.children.get(j).keyChar&&root.children.get(j).storeWord==1) return true;
            }
            return false;
        }
        else{
            if(word.charAt(start)!='.'){
                for(int j=0;j<root.children.size();j++){
                    if(word.charAt(start)==root.children.get(j).keyChar) return search(word,start+1,root.children.get(j));
                }
                return false;
            }
            else{
                boolean res = false;
                for(int j=0;j<root.children.size();j++){
                    if(search(word,start+1,root.children.get(j))){
                        res = true;
                        break;
                    }
                }
                return res;
            }
        }
    }
}

class TrieNode {
    char keyChar;
    int storeWord;
    List<TrieNode> children;
    // Initialize your data structure here.
    public TrieNode() {
        children = new ArrayList<TrieNode>();
    }
    public TrieNode(char x) {
        keyChar = x;
        children = new ArrayList<TrieNode>();
    }
}

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");