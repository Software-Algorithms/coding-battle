/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null) return null;
        else{
            ListNode slow = head;
            ListNode fast = head;
            while(fast!=null&&fast.next!=null){
                fast = fast.next.next;
                slow = slow .next;
                if(fast==slow){ //x is the length from head to loop start, y is length from loop start to meet point
                                //slow runs x+y, fast runs 2(x+y), let slow return to head and run in same pace, they 
                                //will meet after running for x steps, which is the loop start.
                    slow = head;
                    while(slow!=fast){
                        slow = slow.next;
                        fast = fast.next;
                    }
                    return slow;
                }
            }
            return null;
        }
    }
}