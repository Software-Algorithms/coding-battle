for(int p : stack){} //traverse stack from bottom to top.

public class Solution {
    public String simplifyPath(String path) {
        Stack<String> stack = new Stack<String>();
        StringBuilder word = new StringBuilder();
        for(int i=0;i<path.length();i++){
            if(path.charAt(i)=='/'){
                if(i!=path.length()-1&&path.charAt(i+1)=='/') continue;
                if(word.toString().equals("..")){
                    if(stack.size()!=1) stack.pop();
                }
                else if(!word.toString().equals(".")){
                    word.append('/');
                    stack.push(word.toString());
                }
                word.delete(0,word.length());
            }
            else word.append(path.charAt(i));
        }
        if(word.length()!=0){
            if(word.toString().equals("..")){
                if(stack.size()!=1) stack.pop();
            } 
            else if(!word.toString().equals(".")) stack.push(word.toString());
            //if(word.toString().equals("..")&&(stack.size()!=1)) stack.pop(); 
            //else if(!word.toString().equals(".")) stack.push(word.toString()); //this line may still equals ".."
        }
        StringBuilder res = new StringBuilder();
        while(!stack.isEmpty()){
            res.insert(0,stack.pop());
        }
        if(res.length()!=1&&res.charAt(res.length()-1)=='/') res.delete(res.length()-1,res.length());
        return res.toString();
    }
}


public String simplifyPath(String path) {
    String[] parts = path.split("/");
    List<String> list = new ArrayList<>();
    for (String item: parts) {
        if (item.equals("..") && !list.isEmpty()) {
            list.remove(list.size() - 1);
        } else if (!item.equals("") && !item.equals(".") && !item.equals("..")) {
            list.add(item);
        }
    }
    StringBuilder sb = new StringBuilder();
    for (String item: list) {
        sb.append("/");
        sb.append(item);
    }
    if (sb.length() == 0) {return "/";}
    return sb.toString();
}

 public class Solution {
    public String simplifyPath(String path) {
        Stack<String> stack = new Stack<String>();
        String[] split = path.split("/");
        for(String dir : split){
            if(null==dir || "".equals(dir) || ".".equals(dir) ){
                continue;
            }
            if("..".equals(dir) ){
                if(!stack.isEmpty()){
                    stack.pop();
                }
            }else {
                stack.push(dir);
            }
        }
        if(stack.isEmpty()){
            return "/";
        }
        StringBuilder builder = new StringBuilder("");
        for(String p : stack){   //iterate stack from bottom to top
            builder.append("/"+p);
        }
        return builder.toString();
    }
}