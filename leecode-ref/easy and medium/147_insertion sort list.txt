/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

public ListNode insertionSortList(ListNode head) {
        if( head == null ){
            return head;
        }

        ListNode helper = new ListNode(0); //new starter of the sorted list
        ListNode cur = head; //the node will be inserted
        ListNode pre = helper; //insert node between pre and pre.next
        ListNode next = null; //the next node will be inserted
        //not the end of input list
        while( cur != null ){
            next = cur.next;
            //find the right place to insert
            while( pre.next != null && pre.next.val < cur.val ){
                pre = pre.next;
            }
            //insert between pre and pre.next
            cur.next = pre.next;
            pre.next = cur;
            pre = helper;
            cur = next;
        }

        return helper.next;
    } 

public class Solution {
    public ListNode insertionSortList(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode iter = head.next;
        ListNode preIter = head;
        while(iter!=null){
            ListNode tmp = iter;
            iter = iter.next;
            ListNode sortedIter = head;
            while(sortedIter!=tmp&&sortedIter.val<tmp.val) sortedIter = sortedIter.next;
            if(sortedIter==tmp) {
                preIter = preIter.next;
                continue;
            }
            else if(sortedIter==head){
                tmp.next = sortedIter;
                head = tmp;
                preIter.next = iter;
            }
            else if(sortedIter==preIter){//since in code below we insert node 3 before 4 by insert node 3 after 4 and swap there value,
                int tmpVal = tmp.val;    //after we insert node before preIter, preIter will be 2 distance before curr iter, then we need
                tmp.val = preIter.val;   //to deal with this special case and move preIter.
                preIter.val = tmpVal;
                preIter = preIter.next;
            }
            else{
                int tmpVal = tmp.val; 
                tmp.next = sortedIter.next;
                tmp.val = sortedIter.val;
                sortedIter.val = tmpVal;
                sortedIter.next = tmp;
                preIter.next = iter; //we don't need to change preIter cuz we delete the node after it so it's still 1 distance before
            }                        //current iter            
        }
        return head;
    }
}

//can also use recursion to simplify the case switch.