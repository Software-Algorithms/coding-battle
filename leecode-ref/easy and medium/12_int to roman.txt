package leecode;

class Solution_intToRoman {
    public static String intToRoman(int num) {
        StringBuilder roman = new StringBuilder();
        int thousand = num/1000;
        int fivehundred = (num%1000)/500;
        int hundred = (num%500)/100;
        int fifty = (num%100)/50;
        int ten = (num%50)/10;
        int five = (num%10)/5;
        int one = num%5;
        switch(thousand){
        case 1: roman.append("M");
                break;  //be careful not to forget the break, otherwise java will jump to case X and go on after X
        case 2: roman.append("MM");
                break;
        case 3: roman.append("MMM");
                break;
        }
        if(fivehundred==1){
        	switch(hundred){
        	case 0: roman.append("D");
        	break;
        	case 1: roman.append("DC");
        	break;
        	case 2: roman.append("DCC");
        	break;
        	case 3: roman.append("DCCC");
        	break;
        	case 4: roman.append("CM");
        	break;
        	}
        }
        else{
        	switch(hundred){
        	case 1: roman.append("C");
        	break;
        	case 2: roman.append("CC");
        	break;
        	case 3: roman.append("CCC");
        	break;
        	case 4: roman.append("CD");
        	break;
        	}
        }
        if(fifty==1){
        	switch(ten){
        	case 0: roman.append("L");
        	break;
        	case 1: roman.append("LX");
        	break;
        	case 2: roman.append("LXX");
        	break;
        	case 3: roman.append("LXXX");
        	break;
        	case 4: roman.append("XC");
        	break;
        	}
        }
        else{
        	switch(ten){
        	case 1: roman.append("X");
        	break;
        	case 2: roman.append("XX");
        	break;
        	case 3: roman.append("XXX");
        	break;
        	case 4: roman.append("XL");
        	break;
            }
        }
        if(five==1){
        	switch(one){
        	case 0: roman.append("V");
        	break;
        	case 1: roman.append("VI");
        	break;
        	case 2: roman.append("VII");
        	break;
        	case 3: roman.append("VIII");
        	break;
        	case 4: roman.append("IX");
        	break;
        	}
        }
        else{
        	switch(one){
        	case 1: roman.append("I");
        	break;
        	case 2: roman.append("II");
        	break;
        	case 3: roman.append("III");
        	break;
        	case 4: roman.append("IV");
        	break;
        	}
        }      
        return roman.toString();
    }

    public static String intToRoman2(int num){
    	int[] levels ={1000,900,500,400,100,90,50,40,10,9,5,4,1};
    	String[] romanNums = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
    	StringBuilder roman = new StringBuilder();
    	for(int i=0; i<13;i++){
    		while(num>=levels[i]){
    			roman.append(romanNums[i]);
    			num -= levels[i];
    		}
    	}
    	return roman.toString();	
    }
}



public class intToRoman {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        String s = Solution_intToRoman.intToRoman2(1998);
        System.out.println(s);
	}

}
