/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 public class Solution {
     public void reorderList(ListNode head) {
         if(head==null||head.next==null) return;
         int length = 0;
         ListNode helper = head;
         while(helper!=null) {
             helper = helper.next;
             length++;
         }
         helper = head;
         int halfLength = length/2-1;
         while(halfLength>0){
             helper = helper.next;
             halfLength--;
         }
         ListNode head2 = reverseList(helper.next); //when use recursion vision, cause stack overflow, don't know why.
                                                    //no such issue in reverse list problem, so weird.
         helper.next = null;
         helper = head;
         while(helper!=null){
             ListNode tmp = helper.next;
             ListNode tmp2 = head2.next;
             helper.next = head2;
             head2.next = tmp;
             helper = tmp;
             if(helper==null&&tmp2!=null) head2.next = tmp2; //odd length
             else head2 = tmp2; //even length
         }
         return;
     }
     public ListNode reverseList(ListNode head) {
        if(head==null||head.next==null)return head;
        else{
            ListNode first = head, second = head.next, temp = null;
            while(second!=null){
                temp = second.next;
                second.next = first;
                first = second;
                second = temp;
            }
            head.next = null; //extremely important!!! Don't forget to set the head.next to null, or it will cause infinite loop 
            return first;
        }
    }
 }
 
/*public class Solution {
    public void reorderList(ListNode head) {
        if(head==null||head.next==null||head.next.next==null) return;
        ListNode helper = head;
        while(helper!=null&&helper.next!=null&&helper.next.next!=null){
            helper = helper.next;
        }
        ListNode l1 = head.next;
        head.next = helper.next;
        helper.next = null;
        head.next.next = l1;
        reorderList(l1);
        
    }
}*/