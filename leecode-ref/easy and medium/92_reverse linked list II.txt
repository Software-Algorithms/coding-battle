/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

//see the improvement comments. 
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head==null||m==n) return head;
        else if(m==1){ // to improve, create a fake head to avoid such branch case.
            ListNode curr = head.next;
            ListNode partialTail = head;
            while(n-->m){
                ListNode tmp = curr.next;
                curr.next = head;
                head = curr;
                curr = tmp;
                if(n-m==0) partialTail.next = tmp;
            }
            return head;
        } 
        else{
            ListNode mNode = head;
            while(m>2) { // caution!!! don't write m-->2 here, it will influence the n-->m later.
                mNode = mNode.next;
                m--; //to improve, use another int i to iterate, then don't need these two lines.
                n--;
            }
            ListNode curr = mNode.next.next;
            ListNode partialTail = mNode.next;
            ListNode insertPos = mNode.next;
            while(n-->m){ //to improve, could use curr=mNode.next, and each iteration curr.next = curr.next.next, then curr would
                          //be the partialTail and always points to the new next, we don't need the if(n-m==0) branch at the end of
                          //iteration.
                ListNode tmp = curr.next;
                curr.next = insertPos;
                mNode.next = curr;
                insertPos = curr;
                curr = tmp;
                if(n-m==0) partialTail.next = tmp;
            }
            return head;
        }
    }
}