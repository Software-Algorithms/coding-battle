//since it's a circle, if sum of gas >= sum of cost, there is always a solution, vice versa
public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int currGas = 0, curr = 0, sum = 0;
        for(int i = 0;i<gas.length;i++){
            currGas += gas[i] - cost[i];
            sum += gas[i] - cost[i];
            if(currGas<0){
                curr = i+1;
                currGas = 0;
            }
        }
        return (sum>=0)?curr:-1;
    }
}
    


//too straight, didn't catch the tricky character of this problem.
public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        for(int i = 0;i<gas.length;i++){ //i++ is excuted after the inside code, not after the checking
            int[] firstPart = helper(gas,cost,i,gas.length-1,0);
            if(firstPart[0]==-1) {
                i = firstPart[1]; //so we should not write i = firstPart[1]+1, cuz i++ will excute later on
                continue;
            }
            else if(firstPart[1]+gas[gas.length-1]<cost[cost.length-1]) return -1;
            int[] secondPart = helper(gas,cost,0,i,firstPart[1]+gas[gas.length-1]-cost[cost.length-1]);
            if(secondPart[0]!=-1) return i;
            else return -1;
        }
        return -1;
    }
    
    public int[] helper(int[] gas, int[] cost, int a, int b, int gasVal){
        int[] res = new int[2];
        res[1] = gasVal;
        for(int i = a;i<b;i++){
            if(res[1]+gas[i]>=cost[i]){
                res[1] += gas[i]-cost[i];
            } 
            else{
                res[0] = -1;
                res[1] = i;
                return res;
            }
        }
        return res;
    }
}