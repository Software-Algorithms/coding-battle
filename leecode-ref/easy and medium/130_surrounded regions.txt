public class Solution {
    //Set<Integer> generated = new HashSet<Integer>();
    public void solve(char[][] board) {
        if(board.length==0) return;
        for(int i=0;i<board[0].length;i++) helper(board,0,i);
        for(int i=1;i<board.length;i++) helper(board,i,board[0].length-1);
        for(int i=0;i<board[0].length-1;i++) helper(board,board.length-1,i);
        for(int i=1;i<board.length-1;i++) helper(board,i,0);
        for(int i =0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='M') board[i][j] = 'O';
                else if(board[i][j]=='O') board[i][j] = 'X';
            }
        }
        return;
    }
    public void helper(char[][] board, int a, int b){
        //if(a,b out of boundary) return; //stackoverflow if put these out of boundary checking here.
        if(board[a][b]=='X'||board[a][b]=='M') return;
        //if(generated.contains((String.valueOf(a)+" "+String.valueOf(b)).hashCode())) return;
        //generated.add((String.valueOf(a)+" "+String.valueOf(b)).hashCode());
        board[a][b] = 'M';
        if(a+1<board.length) helper(board,a+1,b); 
        if(a-1>0) helper(board,a-1,b);
        if(b+1<board[0].length) helper(board,a,b+1);
        if(b-1>0) helper(board,a,b-1);
    }
}