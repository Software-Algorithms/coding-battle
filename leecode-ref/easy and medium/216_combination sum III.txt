public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
    	if(k<=0) return new ArrayList<List<Integer>>(); //in case array index overflow for(int i = start;i<source.length-k+1;i++) 
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int[] source = {1,2,3,4,5,6,7,8,9};
        combinationSum3(source,0,k,n,new ArrayList<Integer>(),result);
        return result;          
    }
    
    public void combinationSum3(int[] source, int start, int k, int n, List<Integer> curr, List<List<Integer>> result){
    	if(k==1){
    		for(int i = start;i<source.length;i++){
    			if(source[i]==n){
    				List<Integer> list = new ArrayList<Integer>(curr);
    				list.add(source[i]);
    				result.add(list);
    			}
    		}
    	}
    	else{
    		for(int i = start;i<source.length-k+1;i++){ //using last k-1 element as head is meaningless. reduce the iteration
    			List<Integer> list = new ArrayList<Integer>(curr);
    			list.add(source[i]);
    			combinationSum3(source,i+1,k-1,n-source[i],list,result);
    		}
    	}
    }    
}