//same time compleixty level, but slightly faster.
public class Solution {
    public int numSquares(int n) {
        int[] least = new int[n+1];
        for(int i = 1; i <= n; i++) {
            least[i] = Integer.MAX_VALUE;
            for(int j = (int)Math.sqrt((double)i); j >= 1; j--) {
                if(j*j == i) {
                    least[i] = 1;
                    break;
                }
                least[i] = Math.min(least[i], least[j*j] + least[i-j*j]);
            }
        }
        return least[n];
    }
}

/*
public class Solution {
    public int numSquares(int n) {
        int[] least = new int[n+1];
        Set<Integer> sqrs = new HashSet<Integer>();
        for(int i = 1; i <= n/i; i++) sqrs.add(i*i); //i<=n/i avoid integer overflow.
        for(int i = 1; i <= n; i++) {
            if(sqrs.contains(i)) {
                least[i] = 1;
                continue;
            }
            int min = Integer.MAX_VALUE;
            for(int sqr : sqrs) {
                if(sqr < i) min = Math.min(min, least[i-sqr] + 1);
            }
            least[i] = min;
        }
        return least[n];
    }
}
*/