//maybe time cost higher than Sieve of Eratosthenes, but only need to store primes, space cost is O(primes) rather than O(n)
public class Solution {
    public int countPrimes(int n) {
        int count = 0;
        List<Integer> primes = new ArrayList<Integer>();
        for(int i=2;i<n;i++){
            boolean isPrime = true;
            for(int j=0;j<primes.size();j++){
                if(primes.get(j)*primes.get(j)>i) break;
                if(i%primes.get(j)==0){
                    isPrime = false;
                    break;
                }
            }
            if(isPrime){
                primes.add(i);
                count++;
            }
        }
        return count;
    }
}

//Sieve of Eratosthenes. 
public int countPrimes(int n) {
   boolean[] isPrime = new boolean[n];
   for (int i = 2; i < n; i++) {
      isPrime[i] = true;
   }
   // Loop's ending condition is i * i < n instead of i < sqrt(n)
   // to avoid repeatedly calling an expensive function sqrt().
   for (int i = 2; i * i < n; i++) {
      if (!isPrime[i]) continue;
      for (int j = i * i; j < n; j += i) {
         isPrime[j] = false;
      }
   }
   int count = 0;
   for (int i = 2; i < n; i++) {
      if (isPrime[i]) count++;
   }
   return count;
}