public class Solution {
    public int[] singleNumber(int[] nums) {
        int xor = 0;
        for(int num:nums){ //get the xor
            xor ^= num;
        }
        xor &= -xor; //get the right most 1 bit
        int[] res = new int[2];
        for(int num:nums){
            if((num&xor)==xor){ //num1 and num2 must be in two group, one with right most 1 bit and the other with right most 0 bit.
                res[0] ^= num;
            }
            else res[1] ^= num;
        }
        return res;
    }
}

/*public class Solution {
    public int[] singleNumber(int[] nums) {
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i<nums.length; i++){
            if(set.contains(nums[i])){
                set.remove((Integer) nums[i]);
            }
            else{
                set.add(nums[i]);
            }
        }
        //Integer[] tmpRes = new Integer[2];  //2 ways to dump from set to array.
        //set.toArray(tmpRes);
        Object[] tmpRes = set.toArray();
        int[] res = {(int)tmpRes[0],(int)tmpRes[1]};
        return res;
    }
}*/

/*public class Solution {
    public int[] singleNumber(int[] nums) {
        Map<Integer,String> map = new HashMap<Integer,String>();
        List<Integer> list = new ArrayList<Integer>();
        for(int i = 0; i<nums.length; i++){
            if(map.get(nums[i])=="Single"){
                map.put(nums[i],"Duplicate");
            }
            else{
                map.put(nums[i],"Single");
            }
        }
        for(int j =0 ;j<nums.length;j++){
            if(map.get(nums[j])=="Single"){
                list.add(nums[j]);
            }
        }
        int[] res = new int[2];
        res[0] = list.get(0);
        res[1] = list.get(1);
        return res;
    }
}*/