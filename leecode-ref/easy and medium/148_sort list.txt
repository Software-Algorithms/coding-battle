public class Solution {
    public ListNode sortList(ListNode head) {
        ListNode countHelper = head;
        int count = 0;
        while(countHelper!=null) {
            count++;
            countHelper = countHelper.next;
        }
        return sortList(head, count);
    }
    public ListNode sortList(ListNode head, int length){
        if(length==0) return null;
        else if(length==1) {
            head.next = null;  //operation A. either operation A or B need to be done to avoid memorey limist exceed.
            return head;
        }
        else{
            int mid = length/2;
            ListNode right = head;
            while(mid-->0){
                /*if(mid==0){                   // operation B.
                    ListNode tmp = right.next;
                    right.next = null;
                    right = tmp;
                }*/
                right = right.next;
            }
            head = sortList(head,length/2);
            right = sortList(right,length-length/2);
            ListNode fakeHead = new ListNode(0);
            ListNode currTail = fakeHead;
            while(head!=null&&right!=null){
                if(head.val>right.val){
                    currTail.next = right;
                    currTail = right;
                    right = right.next;
                }
                else{
                    currTail.next = head;
                    currTail = head;
                    head = head.next;
                }
            }
            if(head==null) currTail.next = right;
            else currTail.next = head;
            return fakeHead.next;
        }
    }
}