public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
    	List<Integer> res = new ArrayList<Integer>();
        if(input.isEmpty()) return res;
        int l = 0, r = 0, countOpe = 0; //count of operator.
        for(int i=0;i<input.length();i++){
        	String tmpStr = input.substring(i,i+1);
        	if(tmpStr.equals("+")||tmpStr.equals("-")||tmpStr.equals("*")) countOpe++;
        }
        String[] newInput = new String[2*countOpe+1];
        countOpe = 0;
        for(int i=0;i<input.length();i++){
        	String tmpStr = input.substring(i,i+1);
        	if(tmpStr.equals("+")||tmpStr.equals("-")||tmpStr.equals("*")){
        		newInput[countOpe++] = input.substring(l, r);
        		newInput[countOpe++] = input.substring(i,i+1);
        		l = i+1;
        		r = i+1;
        	}
        	else{
        		r++;
        	}
        	if(r==input.length()) newInput[countOpe] = input.substring(l,r);
        }
        return diffWaysToCompute(newInput,0,newInput.length-1);
        
    }
    public List<Integer> diffWaysToCompute(String[] input, int l, int r) {
    	List<Integer> res = new ArrayList<Integer>();
    	if(l==r){
    		res.add(Integer.parseInt(input[l]));
    		return res;
    	}
    	if(l==r-2){
    		int left = Integer.parseInt(input[l]);
    		int right = Integer.parseInt(input[r]);
    		switch(input[l+1]){
    			case "+": res.add(left+right);
    				break;
    			case "-": res.add(left-right);
    				break;
    			case "*": res.add(left*right);
    		}
    		return res;
    	}
    	for(int i=l;i<r;i+=2){
    		List<Integer> left = diffWaysToCompute(input,l,i);
    		List<Integer> right = diffWaysToCompute(input,i+2,r);
    		for(int m:left){
    			for(int n:right){
    				switch(input[i+1]){
        			case "+": res.add(m+n);
        				break;
        			case "-": res.add(m-n);
        				break;
        			case "*": res.add(m*n);
    				}
    			}
    		}
    	}   	
    	return res;
    }
}