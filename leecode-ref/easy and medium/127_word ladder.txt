public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
    	Queue<String> bfs = new LinkedList<String>();
    	bfs.add(beginWord);
    	Map<String,Integer> levelMap = new HashMap<String,Integer>();
    	levelMap.put(beginWord, 1);
    	while(!bfs.isEmpty()){
    		String head = bfs.poll();
    		for(int i = 0;i<head.length();i++){
    			for(char j = 'a';j<='z';j++){
                    String permuteOne = oneLetterPermute(head, i, j);
                    if(permuteOne.equals(endWord)) return levelMap.get(head)+1;
                    if(!permuteOne.equals(head)&&wordDict.contains(permuteOne)){
                        bfs.add(permuteOne);
                        levelMap.put(permuteOne, levelMap.get(head)+1);
                        wordDict.remove(permuteOne);
                    }     
                }
    		}    		
    	}
        return 0;
        
    }
    
    public String oneLetterPermute(String str, int pos, char letter){
		char[] permutation = str.toCharArray();
		permutation[pos] = letter;
		return new String(permutation);
	}
	
    
    /*public String oneLetterPermute(String str, int pos, int letter){ //substring is too expensive and cause time limit exceed
		char permuteLetter = (char)(letter+97);
		return str.substring(0,pos) + String.valueOf(permuteLetter) + str.substring(pos+1, str.length());
	}*/
    
}


//others sol, don't use map to record level of bfs
/*
public int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
    Set<String> reached = new HashSet<String>();
    reached.add(beginWord);
    wordDict.add(endWord);
    int distance = 1;
    while(!reached.contains(endWord)) {
        Set<String> toAdd = new HashSet<String>();
        for(String each : reached) {
            for (int i = 0; i < each.length(); i++) {
                char[] chars = each.toCharArray();
                for (char ch = 'a'; ch <= 'z'; ch++) {
                    chars[i] = ch;
                    String word = new String(chars);
                    if(wordDict.contains(word)) {
                        toAdd.add(word);
                        wordDict.remove(word);
                    }
                }
            }
        }
        distance ++;
        if(toAdd.size() == 0) return 0;
        reached = toAdd;
    }
    return distance;
}
*/