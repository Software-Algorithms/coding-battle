public class Solution{
     public void sortColors(int[] nums) {
         int redEnd = 0;
         int blueStart = nums.length-1;
         int current = 0;
         while(current<=blueStart){
             if(nums[current]==0){
                 nums[current] = nums[redEnd];
                 nums[redEnd] = 0;
                 current++; //can't eliminate this line otherwise array index overflow,
                            //and nums[current] now must be 1, so just move forward                              
                 redEnd ++;
             }
             else if(nums[current]==2){
                 nums[current] = nums[blueStart];
                 nums[blueStart] = 2;
                 blueStart--; //don't move current because current now might be white or blue
             }
             else{
                 current++;
             }
         }
     }
         
}

public class Solution {
    public void sortColors(int[] nums) {
        //Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        int red = 0,white = 0,blue = 0;
        for(int i:nums){
            switch(i){
                case 0: red++;
                break;
                case 1: white++;
                break;
                case 2: blue++;
                break;
            }
        }
        for(int j =0;j<nums.length;j++){
            if((j>=0)&&(j<red)) nums[j] = 0;
            else if((j>=red)&&(j<(red+white))) nums[j] =1;
            else nums[j] =2;
        }
    }
}