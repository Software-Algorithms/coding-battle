public class Solution {
    public List<String> anagrams(String[] strs) {
        List<String> res = new ArrayList<String>();
        Map<String,Integer> map = new HashMap<String,Integer>();
        for(int i = 0;i<strs.length;i++){
            char[] tmp = strs[i].toCharArray();
            Arrays.sort(tmp);
            StringBuilder strbd = new StringBuilder();
            for(int j=0;j<tmp.length;j++) strbd.append(tmp[j]); // char[].toString() doesn't make sense.
            String tmpStr = strbd.toString();
            if(map.containsKey(tmpStr)){
                if(map.get(tmpStr)!=-1) res.add(strs[map.get(tmpStr)]);
                res.add(strs[i]);
                map.put(tmpStr,-1);
            }
            else{
                map.put(tmpStr,i);
            }
        }
        return res;
    }
}

public class Solution {
    public List<String> anagrams(String[] strs) {
        List<String> res = new ArrayList<String>();
        Set<Integer> added = new HashSet<Integer>();
        for(int i = 0;i<strs.length;i++){
            if(added.contains(i)) continue;
            char[] tmp = strs[i].toCharArray();
            Arrays.sort(tmp);
            String tmpStr = tmp.toString();
            int indicator = 0;
            for(int j=i+1; j<strs.length;j++){
                if(added.contains(j)||strs[j].length()!=tmpStr.length()) continue;
                char[] tmpTwo = strs[j].toCharArray();
                Arrays.sort(tmpTwo);
                String tmpStrTwo = tmpTwo.toString();
                if(tmpStr.equals(tmpStrTwo)){
                    indicator = 1;
                    res.add(strs[j]);
                    added.add(j);
                }
            }
            if(indicator==1){
                res.add(strs[i]);
            }
        }
        return res;
    }
}