package leecode;

class Solution_buySellStockOneTransaction {
    public int maxProfit(int[] prices) {
        return maxProfit(prices,0,prices.length-1);
    }
    
    public int maxProfit_DP(int[] prices){
        if(prices.length<=1) return 0;
        else{
            int currProfit = 0;
            int preMin = prices[0];
            for(int i= 1;i<prices.length;i++){
                currProfit = Math.max(currProfit, prices[i]-preMin);
                preMin = Math.min(preMin, prices[i]);
            }
            return currProfit;
        }
    }
    
    
    public int maxProfit(int[] prices, int a, int b){
        if(a>=b) return 0;
        else{
            int half = (a+b)/2;
            int left = maxProfit(prices,a,half);
            int right = maxProfit(prices,half+1,b);
            int leftmin = Integer.MAX_VALUE, rightmax = Integer.MIN_VALUE;
            for(int i = a;i<=half;i++){
                if(prices[i]<leftmin) leftmin = prices[i];
            }
            for(int j = half+1;j<=b;j++){
                if(prices[j]>rightmax) rightmax = prices[j];
            }
            int crossMax = rightmax-leftmin;
            return Math.max(crossMax, Math.max(left, right));
        }
    }
}

public class buySellStockOneTransaction {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Solution_buySellStockOneTransaction sol = new Solution_buySellStockOneTransaction();
        int[] test = {1,2};
        int i = sol.maxProfit(test);
        System.out.println(i);
    }

}
