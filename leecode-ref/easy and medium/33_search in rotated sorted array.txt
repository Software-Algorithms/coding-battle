public class Solution {
    public int search(int[] nums, int target) {
        
        int a = 0, b = nums.length-1;
        while(a<=b){  // use a<=b in case ony 1 element in nums. with line 8 we will never have the case a = b later.
            int half = (a+b)/2;
            if(nums[half]==target) return half;
            else if(half==a){
                if(nums[b]==target) return b;
                else return -1;
            }
            else if(nums[half]>nums[a]){
                if(target>=nums[a]&&target<nums[half]) b = half-1;
                else a= half +1;
            }
            else{
                if(target>nums[half]&&target<=nums[b]) a = half +1;
                else b = half -1;
            }
        }
        return -1;
    }
}

public class Solution {
    public int search(int[] nums, int target) {
        if(nums[0]==target) return 0;
        else if(nums.length == 1) return -1;
        else{
            if(nums[0]<nums[nums.length-1]) return biSearch(nums,0,nums.length-1,target);
            else{
                int breakPoint = findMin_DQ(nums, 0 ,nums.length-1);
                if(nums[breakPoint]==target) return breakPoint;
                else if(nums[0]<=target&&nums[breakPoint-1]>=target) return biSearch(nums,0,breakPoint-1,target);
                return biSearch(nums, breakPoint, nums.length-1, target);
                
            }
        }
    }
    
    public int findMin_DQ(int[] nums,int a, int b){
        if(a==b)return a;
        else{
            int half = (a+b)/2;
            if(nums[half]>nums[half+1]) return half+1;
            else{
                if(nums[half]>nums[b]) return findMin_DQ(nums,half,b);
                else return findMin_DQ(nums,a,half);
            }
        }
    }
    
    public int biSearch(int[] nums, int a, int b, int target){
        if(a>b) return -1;
        else if(a==b){
            if(nums[a] == target) return a;
            else return -1;
        }
        else{
            int half = (a+b)/2;
            if(nums[half] == target) return half;
            else if (nums[half] > target) return biSearch(nums, a, half-1, target);
            else return biSearch(nums, half+1, b, target);
        }
    }
}
    
        
