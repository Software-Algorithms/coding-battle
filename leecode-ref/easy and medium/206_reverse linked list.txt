/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

public class Solution {
    
    public ListNode reverseList(ListNode head) {
        if(head==null||head.next==null)return head;
        else{
            ListNode newHead = null;
            newHead = reverseList(head.next);
            head.next.next = head; //head.next points to the new tail, set its next to head
            head.next = null; //add this step in order not to create infinite loop
            return newHead;
        }
    }
    
}  


//somehow not smart as well,we don't really need a variable tail to store the tails 
/*public class Solution {
    ListNode tail = null;
    ListNode newHead = null;
    public ListNode reverseList(ListNode head) {
        if(head==null||head.next==null)return head;
        else{
            reverse(head);
            head.next = null;
            return newHead;
        }
    }
    public void reverse(ListNode head){
        if(head==null) return;
        else if(head.next==null){
            tail = head;
            newHead = head;
        }
        else{
            reverse(head.next);
            tail.next = head;
            tail = head;
        }
    }
} */
 
// recursion method: high time complextiy cuz every time need to travel from head to tail.
/*public class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null||head.next==null)return head;
        else{
            ListNode tail = head;
            while(tail.next.next!=null) tail = tail.next;
            ListNode temp = tail.next;
            tail.next = null;
            tail = temp;
            tail.next = reverseList(head);
            return tail;
        }
    }
} */
 
 
/*public class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null||head.next==null)return head;
        else{
            ListNode first = head, second = head.next, temp = null;
            while(second!=null){
                temp = second.next;
                second.next = first;
                first = second;
                second = temp;
            }
            head.next = null; //extremely important!!! Don't forget to set the head.next to null, or it will cause infinite loop 
            return first;
        }
    }
}*/