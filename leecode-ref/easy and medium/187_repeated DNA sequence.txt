public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {

    Set<String> set = new HashSet<String>();

    List<String> out = new ArrayList<String>();

    if (s.length() <= 10) return out;

    int n = s.length();

    for (int i = 0; i <= n - 10; ++i) {
        String cur = s.substring(i, i + 10);
        if (!set.add(cur)) {
            if (!out.contains(cur))
                out.add(cur);
            continue;
        }
    }

    return out;

}
    
}

//no need to do reverse......
//memory limit exceed cuz use string as key in hash map is very inefficient.
public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> res = new ArrayList<String>();
        if(s.length()<=10) return res;
        Map<String,Integer> map = new HashMap<String,Integer>();
        for(int i=0;i<s.length()-9;i++){
            String str = s.substring(i,i+10);
            String reverseStr = reverseStr(str);
            if(!map.containsKey(str)&&!map.containsKey(reverseStr)){
                map.put(str,0);
            }
            else if(map.containsKey(str)&&!map.containsKey(reverseStr)){
                if(map.get(str)==0){
                    res.add(str);
                    map.put(str,1);
                }
            }
            else if(!map.containsKey(str)&&map.containsKey(reverseStr)){
                res.add(str);
                map.put(str,1);
                if(map.get(reverseStr)==0){
                    res.add(reverseStr);
                    map.put(reverseStr,1);
                }
            }
        }
        return res;
    }
    public String reverseStr(String s){
        StringBuilder strbd = new StringBuilder();
        for(int i = s.length()-1;i>=0;i--){
            strbd.append(s.substring(i,i+1));
        }
        return strbd.toString();
    }
    
}

public List<String> findRepeatedDnaSequences(String s) {
    List<String> list = new ArrayList<String>();
    if (s == null || s.length() < 10) return list;
    HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();

    for (int i = 0; i + 10 <= s.length(); i++ ) {
        int hash = stringToHash(s.substring(i, i + 10));
        if (map.containsKey(hash)) {
            if (!map.get(hash)) {
                list.add(s.substring(i, i + 10));
                map.put(hash, true);
            }
        } else {
            map.put(hash, false);
        }
    }
    return list;
}

private int stringToHash (String s) {
    String numberBuilder = "";
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == 'A') numberBuilder += "0";
        if (s.charAt(i) == 'C') numberBuilder += "1";
        if (s.charAt(i) == 'G') numberBuilder += "2";
        if (s.charAt(i) == 'T') numberBuilder += "3";
    }
    return Integer.parseInt(numberBuilder, 4);
}