/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
	Stack<TreeNode> iterator = new Stack<TreeNode>();
    public BSTIterator(TreeNode root) {  
        TreeNode minNode = root;
        while(minNode!=null){
        	iterator.push(minNode);
        	minNode = minNode.left;
        }        
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !iterator.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
    	if(iterator.isEmpty()) return 0;
    	else{
    		TreeNode smallest = iterator.pop();
    		int val = smallest.val;
    		smallest = smallest.right;
    		while(smallest!=null){
    			iterator.push(smallest);
    			smallest = smallest.left;
    		}
    		return val;
    	}
        
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */