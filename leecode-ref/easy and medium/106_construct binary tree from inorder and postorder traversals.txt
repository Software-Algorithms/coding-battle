/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTree(inorder,postorder,0,inorder.length-1,0,postorder.length-1);
        
    }
    public TreeNode buildTree(int[] inorder, int[] postorder, int inLeft, int inRight, int poLeft, int poRight){
        if(inLeft>inRight) return null;
        else if(inLeft==inRight) return new TreeNode(inorder[inLeft]);
        else{
            TreeNode root = new TreeNode(postorder[poRight]);
            int split = 0;
            for(split = inLeft;split<=inRight;){
                if(inorder[split]==postorder[poRight]) break;
                split++;
            }
            root.left = buildTree(inorder,postorder,inLeft,split-1,poLeft,poLeft+split-inLeft-1);
            root.right = buildTree(inorder,postorder,split+1,inRight,poLeft+split-inLeft,poRight-1);
            return root;
        }
    }
}